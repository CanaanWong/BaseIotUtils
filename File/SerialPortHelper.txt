 case R.id.btn_init:
    //获得当前选择串口和波特率
    String com = spCom.getSelectedItem().toString();
    int baudrate = Integer.parseInt(spBurate.getSelectedItem().toString());
    //①未开启心跳包
    //心跳包参数设置 默认用某一条命令周期性的去获取设备返回的消息
    //主要判断是否连接正常
    HeartBeatEntity heartBeatEntity = new HeartBeatEntity(new byte[]{(byte) 0x12}, FlagManager.FLAG_HEARTBEAT, 15 * 1000);
    ComEntity comEntity = new ComEntity(
            com//串口地址
            , baudrate//波特率
            , 6000//超时时间
            , 3//重试次数
            , heartBeatEntity//心跳检测参数
    );
    //初始化数据
    SerialPortHelper.
            getInstance().
            setComEntity(comEntity).
            setOnComListener(new OnComListener() {
                @Override
                public void writeCommand(byte[] comm, int flag) {
                    String writeData = "writeCommand>>> comm=" + DataConvertUtils.encodeHexString(comm) + ",flag=" + flag;
                    Log.e(TAG, writeData);
                    Message message = handler.obtainMessage();
                    message.obj = writeData;
                    handler.sendMessage(message);
                }

                @Override
                public void readCommand(byte[] comm, int flag) {
                    String readData = "readCommand>>> comm=" + DataConvertUtils.encodeHexString(comm) + ",flag=" + flag;
                    Log.e(TAG, readData);
                    Message message = handler.obtainMessage();
                    message.obj = readData;
                    handler.sendMessage(message);
                }

                @Override
                public void writeComplet(int flag) {
                    String writeSuccessful = "writeComplet>>> flag=" + flag;
                    Log.e(TAG, writeSuccessful);
                    Message message = handler.obtainMessage();
                    message.obj = writeSuccessful;
                    handler.sendMessage(message);
                }


                @Override
                public void isReadTimeOut(int flag) {
                    String readTimeOut = "isReadTimeOut>>> flag=" + flag;
                    Log.e(TAG, readTimeOut);
                    Message message = handler.obtainMessage();
                    message.obj = readTimeOut;
                    handler.sendMessage(message);
                }

                @Override
                public void isOpen(boolean isOpen) {
                    String comStatus = isOpen ? "isOpen>>>串口打开！" : "isOpen>>>串口关闭";
                    Log.e(TAG, comStatus);
                    Message message = handler.obtainMessage();
                    message.obj = comStatus;
                    handler.sendMessage(message);
                }

                @Override
                public void comStatus(boolean isNormal) {
                    String comStatus = isNormal ? "comStatus>>>串口正常！" : "comStatus>>>串口异常";
                    Log.e(TAG, comStatus);
                    Message message = handler.obtainMessage();
                    message.obj = comStatus;
                    handler.sendMessage(message);
                }

            }).
            openSerialPort();
        break;
    case R.id.btn_test_send://发送命令
        //这里只是一个示例
        //这里时多个命令发送
        //单个命令发送
        String hexComm = etCommand.getText().toString().trim();
        byte[] comm = DataConvertUtils.decodeHexString(hexComm);
        SerialPortHelper.getInstance().setWriteAfterRead(comm, FlagManager.FLAG_CHECK_UPDATE);
        break;
    case R.id.btn_close:
        SerialPortHelper.getInstance().closeSerialPort();
        break;
    case R.id.btn_clear://清除结果
        tvResult.setText("");
        break;


 @Override
    protected void onDestroy() {
        super.onDestroy();
        SerialPortHelper.getInstance().closeSerialPort();
    }